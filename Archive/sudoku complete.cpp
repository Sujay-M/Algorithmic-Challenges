#include<iostream>
using namespace std;
struct node
{
	int temp[9][9];
	int poss[10],refi,refj;
	node *link;
}*ptr=NULL,*save=NULL;
class sudoku
{
	int sudo[9][9],test[10],i,j,flag,k,t,m,n,prevflag;
	node *top;
	public:
	sudoku()
	{
		top=NULL;
	}
	void get()
	{
		flag=0;
		for(i=0;i<9;i++)
			for(j=0;j<9;j++)
			{
				cin>>sudo[i][j];
				cout<<endl;
				if(sudo[i][j]!=0)
					flag++;
			}
		prevflag=flag;
	}
	void manip()
	{
		while(flag<81)
		{
			for(i=0;i<9;i++)
				for(j=0;j<9;j++)
				{
					sudo[i][j]=possible();
					if(sudo[i][j]==-1)
					{
						trial_error();
						break;
					}
				}

			if(flag==prevflag)
			{
				push();
				trial_error();
			}

			prevflag=flag;

		}
	}
	void push()
	{
		ptr=new node;
   		if(ptr==NULL)
     		{
			cout<<"Overflow ";
     		}
		else
		{
			for(i=0;i<9;i++)
				for(j=0;j<9;j++)
					ptr->temp[i][j]=sudo[i][j];
			for(i=0;i<9;i++)
				for(j=0;j<9;j++)
				{
					if(ptr->temp[i][j]==0)
					{
						ptr->refi=i;
						ptr->refj=j;
						for(int l=1;l<10;l++)
							ptr->poss[l-1]=l;
						ptr->poss[9]=0;
						for(k=0;k<9;k++)
						{
							if(ptr->temp[i][k]!=0)
							{
								for(t=0;ptr->poss[t]!=0;t++)
								{
									if(ptr->poss[t]==ptr->temp[i][k])
									{
										while(ptr->poss[t+1]!=0)
										{
											ptr->poss[t]=ptr->poss[t+1];
											t++;
										}
										ptr->poss[t]=0;
									}
								}
							}
						}
						for(k=0;k<9;k++)
						{
							if(ptr->temp[k][j]!=0)
							{
								for(t=0;ptr->poss[t]!=0;t++)
								{
									if(ptr->poss[t]==ptr->temp[k][j])
									{
										while(ptr->poss[t+1]!=0)
										{
											ptr->poss[t]=ptr->poss[t+1];
											t++;
										}
										ptr->poss[t]=0;
									}
								}
							}
						}
						if(i<3)
						{
							if(j<3)
							{
								for(m=0;m<3;m++)
									for(n=0;n<3;n++)
									{
										if(ptr->temp[m][n]!=0)
										{
											for(t=0;ptr->poss[t]!=0;t++)
											{
												if(ptr->poss[t]==ptr->temp[m][n])
												{
													while(ptr->poss[t+1]!=0)
													{
														ptr->poss[t]=ptr->poss[t+1];
														t++;
													}
													ptr->poss[t]=0;
												}
											}
										}
									}
							}
							else if(j>2&&j<6)
							{
								for(m=0;m<3;m++)
									for(n=3;n<6;n++)
									{
										if(ptr->temp[m][n]!=0)
										{
											for(t=0;ptr->poss[t]!=0;t++)
											{
												if(ptr->poss[t]==ptr->temp[m][n])
												{
													while(ptr->poss[t+1]!=0)
													{
														ptr->poss[t]=ptr->poss[t+1];
														t++;
													}
													ptr->poss[t]=0;
												}
											}
										}
									}
							}
							else if(j>5&&j<9)
							{
								for(m=0;m<3;m++)
									for(n=6;n<9;n++)
									{
										if(ptr->temp[m][n]!=0)
										{
											for(t=0;ptr->poss[t]!=0;t++)
											{
												if(ptr->poss[t]==ptr->temp[m][n])
												{
													while(ptr->poss[t+1]!=0)
													{
														ptr->poss[t]=ptr->poss[t+1];
														t++;
													}
													ptr->poss[t]=0;
												}
											}
										}
									}
							}
						}
						if(i>2&&i<6)
						{
							if(j<3)
							{
								for(m=3;m<6;m++)
									for(n=0;n<3;n++)
									{
										if(ptr->temp[m][n]!=0)
										{
											for(t=0;ptr->poss[t]!=0;t++)
											{
												if(ptr->poss[t]==ptr->temp[m][n])
												{
													while(ptr->poss[t+1]!=0)
													{
														ptr->poss[t]=ptr->poss[t+1];
														t++;
													}
													ptr->poss[t]=0;
												}
											}
										}
									}
							}
							else if(j>2&&j<6)
							{
								for(m=3;m<6;m++)
									for(n=3;n<6;n++)
									{
										if(ptr->temp[m][n]!=0)
										{
											for(t=0;ptr->poss[t]!=0;t++)
											{
												if(ptr->poss[t]==ptr->temp[m][n])
												{
													while(ptr->poss[t+1]!=0)
													{
														ptr->poss[t]=ptr->poss[t+1];
														t++;
													}
													ptr->poss[t]=0;
												}
											}
										}
									}
							}
							else if(j>5&&j<9)
							{
								for(m=3;m<6;m++)
									for(n=6;n<9;n++)
									{
										if(ptr->temp[m][n]!=0)
										{
											for(t=0;ptr->poss[t]!=0;t++)
											{
												if(ptr->poss[t]==ptr->temp[m][n])
												{
													while(ptr->poss[t+1]!=0)
													{
														ptr->poss[t]=ptr->poss[t+1];
														t++;
													}
													ptr->poss[t]=0;
												}
											}
										}
									}
							}
						}
						if(i>5&&i<9)
						{
							if(j<3)
							{
								for(m=6;m<9;m++)
									for(n=0;n<3;n++)
									{
										if(ptr->temp[m][n]!=0)
										{
											for(t=0;ptr->poss[t]!=0;t++)
											{
												if(ptr->poss[t]==ptr->temp[m][n])
												{
													while(ptr->poss[t+1]!=0)
													{
														ptr->poss[t]=ptr->poss[t+1];
														t++;
													}
													ptr->poss[t]=0;
												}
											}
										}
									}
							}
							else if(j>2&&j<6)
							{
								for(m=6;m<9;m++)
									for(n=3;n<6;n++)
									{
										if(ptr->temp[m][n]!=0)
										{
											for(t=0;ptr->poss[t]!=0;t++)
											{
												if(ptr->poss[t]==ptr->temp[m][n])
												{
													while(ptr->poss[t+1]!=0)
													{
														ptr->poss[t]=ptr->poss[t+1];
														t++;
													}
													ptr->poss[t]=0;
												}
											}
										}
									}
							}
							else if(j>5&&j<9)
							{
								for(m=6;m<9;m++)
									for(n=6;n<9;n++)
									{
										if(ptr->temp[m][n]!=0)
										{
											for(t=0;ptr->poss[t]!=0;t++)
											{
												if(ptr->poss[t]==ptr->temp[m][n])
												{
													while(ptr->poss[t+1]!=0)
													{
														ptr->poss[t]=ptr->poss[t+1];
														t++;
													}
													ptr->poss[t]=0;
												}
											}
										}
									}
							}
						}

					}
				}
			ptr->link=NULL;
			if(top==NULL)
			{
				top=ptr;
			}
			else
			{
				ptr->link=top;
				top=ptr;
			}
		}
	}
	int possible()
	{
		if(sudo[i][j]==0)
		{
			for(int l=1;l<10;l++)
				test[l-1]=l;
			test[9]=0;
			for(k=0;k<9;k++)
			{
				if(sudo[i][k]!=0)
				{
					for(t=0;test[t]!=0;t++)
					{
						if(test[t]==sudo[i][k])
						{
							while(test[t+1]!=0)
							{
								test[t]=test[t+1];
								t++;
							}
							test[t]=0;
						}
					}
				}
			}
			for(k=0;k<9;k++)
			{
				if(sudo[k][j]!=0)
				{
					for(t=0;test[t]!=0;t++)
					{
						if(test[t]==sudo[k][j])
						{
							while(test[t+1]!=0)
							{
								test[t]=test[t+1];
								t++;
							}
							test[t]=0;
						}
					}
				}
			}
			if(i<3)
			{
				if(j<3)
				{
					for(m=0;m<3;m++)
						for(n=0;n<3;n++)
						{
							if(sudo[m][n]!=0)
							{
								for(t=0;test[t]!=0;t++)
								{
									if(test[t]==sudo[m][n])
									{
										while(test[t+1]!=0)
										{
											test[t]=test[t+1];
											t++;
										}
										test[t]=0;
									}
								}
							}
						}
				}
				else if(j>2&&j<6)
				{
					for(m=0;m<3;m++)
						for(n=3;n<6;n++)
						{
							if(sudo[m][n]!=0)
							{
								for(t=0;test[t]!=0;t++)
								{
									if(test[t]==sudo[m][n])
									{
										while(test[t+1]!=0)
										{
											test[t]=test[t+1];
											t++;
										}
										test[t]=0;
									}
								}
							}
						}
				}
				else if(j>5&&j<9)
				{
					for(m=0;m<3;m++)
						for(n=6;n<9;n++)
						{
							if(sudo[m][n]!=0)
							{
								for(t=0;test[t]!=0;t++)
								{
									if(test[t]==sudo[m][n])
									{
										while(test[t+1]!=0)
										{
											test[t]=test[t+1];
											t++;
										}
										test[t]=0;
									}
								}
							}
						}
				}
			}
			if(i>2&&i<6)
			{
				if(j<3)
				{
					for(m=3;m<6;m++)
						for(n=0;n<3;n++)
						{
							if(sudo[m][n]!=0)
							{
								for(t=0;test[t]!=0;t++)
								{
									if(test[t]==sudo[m][n])
									{
										while(test[t+1]!=0)
										{
											test[t]=test[t+1];
											t++;
										}
										test[t]=0;
									}
								}
							}
						}
				}
				else if(j>2&&j<6)
				{
					for(m=3;m<6;m++)
						for(n=3;n<6;n++)
						{
							if(sudo[m][n]!=0)
							{
								for(t=0;test[t]!=0;t++)
								{
									if(test[t]==sudo[m][n])
									{
										while(test[t+1]!=0)
										{
											test[t]=test[t+1];
											t++;
										}
										test[t]=0;
									}
								}
							}
						}
				}
				else if(j>5&&j<9)
				{
					for(m=3;m<6;m++)
						for(n=6;n<9;n++)
						{
							if(sudo[m][n]!=0)
							{
								for(t=0;test[t]!=0;t++)
								{
									if(test[t]==sudo[m][n])
									{
										while(test[t+1]!=0)
										{
											test[t]=test[t+1];
											t++;
										}
										test[t]=0;
									}
								}
							}
						}
				}
			}
			if(i>5&&i<9)
			{
				if(j<3)
				{
					for(m=6;m<9;m++)
						for(n=0;n<3;n++)
						{
							if(sudo[m][n]!=0)
							{
								for(t=0;test[t]!=0;t++)
								{
									if(test[t]==sudo[m][n])
									{
										while(test[t+1]!=0)
										{
											test[t]=test[t+1];
											t++;
										}
										test[t]=0;
									}
								}
							}
						}
				}
				else if(j>2&&j<6)
				{
					for(m=6;m<9;m++)
						for(n=3;n<6;n++)
						{
							if(sudo[m][n]!=0)
							{
								for(t=0;test[t]!=0;t++)
								{
									if(test[t]==sudo[m][n])
									{
										while(test[t+1]!=0)
										{
											test[t]=test[t+1];
											t++;
										}
										test[t]=0;
									}
								}
							}
						}
				}
				else if(j>5&&j<9)
				{
					for(m=6;m<9;m++)
						for(n=6;n<9;n++)
						{
							if(sudo[m][n]!=0)
							{
								for(t=0;test[t]!=0;t++)
								{
									if(test[t]==sudo[m][n])
									{
										while(test[t+1]!=0)
										{
											test[t]=test[t+1];
											t++;
										}
										test[t]=0;
									}
								}
							}
						}
				}
			}
			if(test[1]==0)
			{
				if(test[0]==0)
				{

					return -1;
				}
				else
				{
					flag++;
					return test[0];
				}
			}
			else
				return 0;
		}




	}
	void trial_error()
	{
		int o,p;
		flag=0;
		if(top->poss[0]==0)
		{
			top=top->link;
		}
		else
		{
			for(p=0;p<9;p++)
				for(o=0;o<9;o++)
				{
					sudo[p][o]=top->temp[p][o];
					if(sudo[p][o]!=0)
						flag++;
				}
			for(p=0;top->poss[p+1]!=0;p++);
			sudo[top->refi][top->refj]=top->poss[p];
			top->poss[p]=0;
			flag++;
			return;
		}



	}


	void display()
	{
		cout<<endl;
		for(i=0;i<9;i++)
		{
			for(j=0;j<9;j++)
			{
				cout<<sudo[i][j]<<"  ";
			}
			cout<<endl;
		}
	}
};
int main()
{
    int n,i;
    cin>>n;
	sudoku s[n];
	for(i=0;i<n;i++)
        s[i].get();
    for(i=0;i<n;i++)
        s[i].manip();
    for(i=0;i<n;i++)
        s[i].display();
	return 0;
}







